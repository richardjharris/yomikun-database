# Format: surname (kana), given name (kana), surname (kanji), given name (kana)
# Tests are generated by removing the spaces in 1) yomi 2) kaki and checking if
# the computed split point would add the space back correctly.
import pytest
import romkan
from yomikun.utils.split import (
    find_kana_split_point,
    find_split_point,
    split_kana_name,
    split_kanji_name,
    split_kanji_name_romaji,
)


tests = [
    "まつだいら ただなお 松平 忠直",
    "ゆうき ひでやす 結城 秀康",
    "なんじょう ぶんゆう 南条 文雄",
    "なわ ながとし 名和 長年",
    "なるせ みきお 成瀬 巳喜男",
    "ひとみ きぬえ 人見 絹枝",
    "ばば つねご 馬場 恒吾",
    "ひなつ こうのすけ 日夏 耿之介",
    "こいずみ やくも 小泉 八雲",
    "さくらだ いちろう 桜田 一郎",
    "とみた けいせん 富田 渓仙",
    "あらし さんえもん 嵐 三右衛門",
    "ありさか なりあきら 有坂 成章",
    "おおもり よしたろう 大森 義太郎",
    "おぐま ひでお 小熊 秀雄",
    "かたくら かねたろう 片倉 兼太郎",
    "たけぞえ しんいちろう 竹添 進一郎",
    "たけだ ゆうきち 武田 祐吉",
    "たじみ くになが 多治見 国長",
    "たなべ はじめ 田辺 元",
    "つじ じゅん 辻 潤",
    "つじ ぜんのすけ 辻 善之助",
    "つだ すけひろ 津田 助広",
    "なつめ そうせき 夏目 漱石",
    # SUPER HARD MODE
    "あいしんかくら い 愛新覚羅 維",
    # Chinese? Can identify these via 中国 after the year.
    # ("き ゆうこう 帰有光", 1
    # ("そ じゅん 蘇洵", 1
    # This requires a forename lookup
    "あびる えいさぶろう 阿比類 鋭三郎",
    "まや みねお 魔夜 峰央",
]


@pytest.mark.parametrize('test', tests)
def test_split_point_kanji(test):
    sei_yomi, mei_yomi, sei_kaki, mei_kaki = test.split(' ')

    result = find_split_point(sei_yomi, mei_yomi, f"{sei_kaki}{mei_kaki}")
    assert result == len(sei_kaki)


@pytest.mark.parametrize('test', tests)
def test_split_point_kana(test):
    sei_yomi, mei_yomi, sei_kaki, mei_kaki = test.split(' ')

    result = find_kana_split_point(sei_kaki, mei_kaki, f"{sei_yomi}{mei_yomi}")
    assert result == len(sei_yomi)


@pytest.mark.parametrize('test', tests)
def test_split_point_romaji(test):
    sei_yomi, mei_yomi, sei_kaki, mei_kaki = test.split(' ')

    sei = romkan.to_roma(sei_yomi)
    mei = romkan.to_roma(mei_yomi)
    kanji = sei_kaki + mei_kaki

    result = find_split_point(sei, mei, kanji, romaji=True)
    assert result == len(sei_kaki)

    result_reversed = find_split_point(mei, sei, kanji, romaji=True)
    assert result == result_reversed


def test_split_romaji_ambiguous():
    assert split_kanji_name_romaji("北条大峯", "hojo omine") == "北条 大峯"
    assert split_kanji_name_romaji("北条 大峯", "hojo omine") == "北条 大峯", 'already split'
    assert split_kanji_name_romaji("北条大峯", "hojoomine") == "北条大峯", 'romaji not split'


def test_split_kanji_name():
    assert split_kanji_name("田辺元", "たなべ はじめ") == "田辺 元"
    assert split_kanji_name("田辺元", "わか わか") == "田辺元", 'weird yomi'
    assert split_kanji_name("田辺 元", "たなべ はじめ") == "田辺 元", 'aleady split'
    assert split_kanji_name("田辺元", "たなべはじめ") == "田辺元", 'kanji not split'


def test_split_kana_name():
    assert split_kana_name("田辺 元", "たなべはじめ") == "たなべ はじめ"
    assert split_kana_name("田辺 元", "たなかしゅん") == "たなかしゅん", 'weird yomi'
    with pytest.raises(ValueError):
        assert split_kana_name("田辺 元", "たなべ はじめ") == "たなべ はじめ", 'already split'
    with pytest.raises(ValueError):
        assert split_kana_name("田辺元", "たなかはじめ") == "たなかはじめ", 'kana not split'
