#!/usr/bin/env python3

# Parses JSON records generated by zero-epwing from a EPWING
# format dictionary. Returns names as JSONL.

from __future__ import annotations
import sys
import regex
import json
from dataclasses import dataclass

import json_stream
from dataclasses_json import dataclass_json

from models import NameType, NameData, Lifetime
from utils.split import split_kanji_name
from daijisen.year import parse_birth_and_death_year


def name_from_entry(heading: str, text: str) -> NameData | None:
    """
    There may be some crap after the name
    "heading": "おぎわら‐もりえ【荻原守衛】をぎはらもりヱ",
    "heading": "なかはら‐ていじろう【中原悌二郎】‐テイジラウ"
    """
    if m := regex.match(r'^(\p{Hiragana}+)‐(\p{Hiragana}+)【(\p{Han}+)】', heading):
        sei, mei, kanji = m.groups()
        reading = NameData(kanji, f'{sei} {mei}')

        result = parse_birth_and_death_year(text)

        # Skip entries with no year information, as they are not people.
        if not result:
            return

        reading.lifetime = Lifetime(result.birth_year, result.death_year)

        # Attempt to split the kanji into surname + first name
        sp = split_kanji_name(sei, mei, kanji)
        if sp is not None:
            reading.kaki = f'{kanji[0:sp]} {kanji[sp:]}'

        return reading
    else:
        return


root = json_stream.load(sys.stdin)
entries = root['subbooks'][0]['entries']
for entry in entries:
    heading = entry['heading']

    if 'text' not in entry:
        print(f"No text for entry '{heading}'", file=sys.stderr)
        continue

    text = entry['text']
    if reading := name_from_entry(heading, text):
        print(reading.to_jsonl())
